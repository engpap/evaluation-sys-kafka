# INSTRUCTIONS:
# Build the Docker image using the following command  from the root of the project
# docker build -f cmd/user-service/Dockerfile -t user-service .

# Use an official Go runtime as a parent image
FROM golang:1.21.5

# To avoid error: error: ld returned 1 exit status
# ENV GOARCH=amd64

# Set the working directory inside the container
WORKDIR /app

# Copy the go module files first and download dependencies (for better caching)
COPY go.mod ./
COPY go.sum ./
RUN go mod download
# (DEBUG): List the modules downloaded -> RUN go list -m all

# Copy the internal and pkg directories
COPY internal/ ./internal
COPY pkg/ ./pkg

# Copy the client.properties file
# This file is generated by Confluent Cloud
COPY client.properties ./

# Copy the content of the project-service including the Dockerfile into /app/cmd/user-service
COPY cmd/project-service/ ./cmd/project-service

# (DEBUG): List the files in the current directory
# Open Docker app and see `logs` section
# Uncomment the following line to enable directory listing in logs
# RUN ls -la 

# Build the Go app
# The -o flag specifies the output path of the executable
RUN go build -o main ./cmd/project-service/

# Expose port for the application
EXPOSE 8083

# Run the outyet command by default when the container starts.
# Resembles: ./main client.properties
ENTRYPOINT ["./main", "client.properties"]